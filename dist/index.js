import { fetch } from "@tauri-apps/plugin-http";
import { md5 } from "./md5";

export default class LastFM {
    /**
     * Represents a LastFM API client.
     * @param {Object} options - The options for the LastFM client.
     * @param {string} options.apiKey - The API key for LastFM.
     * @param {string} options.apiSecret - The API secret for LastFM.
     * @param {string} [options.apiUrl='https://ws.audioscrobbler.com/2.0/'] - The API URL for LastFM.
     * @param {boolean} [options.verbose=false] - Whether to log requests to the console.
     * @constructor
     */
    constructor(options) {
        this.apiKey = options.apiKey;
        this.apiSecret = options.apiSecret;
        this.apiUrl = options.apiUrl || 'https://ws.audioscrobbler.com/2.0/';
        this.verbose = options.verbose || false;
        this.album = new Album(this);
        this.artist = new Artist(this);
        this.auth = new Auth(this);
        this.chart = new Chart(this);
        this.geo = new Geo(this);
        this.library = new Library(this);
        this.tag = new Tag(this);
        this.track = new Track(this);
        this.user = new User(this);
    }

    paramsToUrlString(params) {
        let string = `?method=${params.method}`;

        Object.keys(params).sort().forEach(key => {
            if (key == 'method' || key == null) return;
            // Convert tags arrays to comma-separated strings
            if (key == 'tags') {
                params[key] = params[key].join(',');
            }

            string += '&' + key + '=' + encodeURIComponent(params[key]);
        });

        return string;
    }

    paramsToString(params) {
        let string = '';

        Object.keys(params).sort().forEach(key => {
            if (key == null) return;
            // Convert tags arrays to comma-separated strings
            if (key == 'tags') {
                params[key] = params[key].join(',');
            }

            string += key + params[key];
        });

        return string;
    }

    async GET(params) {
        return fetch(this.apiUrl + this.paramsToUrlString(params))
            .then(res => res.json())
            .then(data => {
                return data;
            })
            .catch(err => console.error(err));
    }

    async POST(params) {
        return fetch(this.apiUrl + "?format=json", { method: 'POST', body: new URLSearchParams(params) })
            .then(res => res.json())
            .then(data => {
                return data;
            })
            .catch(err => console.error(err));
    }

    /**
     * Make a request to the LastFM API.
     * @param {string} endpoint - The endpoint to request.
     * @param {Object} params - The parameters to send with the request.
     * @param {string} [method='GET'] - The HTTP method to use.
     * @returns {Promise<Object>}
     */
    async request(endpoint, params, method = 'GET') {
        params = {
            ...params,
            method: endpoint,
            api_key: this.apiKey,
            format: 'json'
        }
        
        if (this.verbose) {
            console.log(`[LastFM] Requesting ${this.apiUrl} with ${JSON.stringify(params)}`);
        }

        return method == 'GET' ? this.GET(params) : this.POST(params);
    }

    /**
     * Make a signed request to the LastFM API.
     * @param {string} endpoint - The endpoint to request.
     * @param {Object} params - The parameters to send with the request.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @param {string} [method='GET'] - The HTTP method to use.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/desktopauth#_6-sign-your-calls}
     */
    async requestSigned(endpoint, params, sk, method = 'GET') {
        params = {
            ...params,
            method: endpoint,
            api_key: this.apiKey
        }

        if (sk) {
            params.sk = sk;
        }

        let paramsString = this.paramsToString(params);
        params.api_sig = md5(`${paramsString}${this.apiSecret}`);
        params.format = 'json';

        if (this.verbose) {
            console.log(`[LastFM] Requesting ${this.apiUrl} with ${JSON.stringify(params)}`);
        }

        return method == 'GET' ? this.GET(params) : this.POST(params);
    }
}

class Album {
    #client;

    /**
     * Represents the Album API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Tag an album using a list of user supplied tags.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.album - The album name. 
     * @param {string} params.tags - An array of user supplied tags to apply to this album. Accepts a maximum of 10 tags.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/album.addTags}
     */
    async addTags(params, sk) {
        return this.#client.requestSigned('album.addtags', params, sk, 'POST');
    }

    /**
     * Get the metadata and tracklist for an album on Last.fm using the album name or a musicbrainz id.
     * @param {Object} params
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.album] - **Required (unless mbid)** The album name.
     * @param {string} [params.mbid] - The musicbrainz id for the album.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @param {string} [params.username] - The username for the context of the request. If supplied, the user's playcount for this album is included in the response.
     * @param {string} [params.lang] - The language to return the biography in, expressed as an ISO 639 alpha-2 code.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getInfo}
     */
    async getInfo(params) {
        return this.#client.request('album.getinfo', params);
    }

    /**
     * Get the tags applied by an individual user to an album on Last.fm. To retrieve the list of top tags applied to an album by all users use album.getTopTags.
     * @param {Object} params
     * @param {string} params.artist - **Required (unless mbid)** The artist name.
     * @param {string} params.album - **Required (unless mbid)** The album name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @param {string} [params.user] - If called in non-authenticated mode you must specify the user to look up.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/album.getTags}
     */
    async getTags(params) {
        return this.#client.request('album.gettags', params);
    }

    /**
     * Get the top tags for an album on Last.fm, ordered by popularity.
     * @param {Object} params
     * @param {string} params.artist - **Required (unless mbid)** The artist name.
     * @param {string} params.album - **Required (unless mbid)** The album name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/chart.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('album.gettoptags', params);
    }

    /**
     * Remove a user's tag from an album.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.album - The album name.
     * @param {string} params.tag - A single user tag to remove from this album.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/album.removeTag}
     */
    async removeTag(params, sk) {
        return this.#client.requestSigned('album.removetag', params, sk, 'POST');
    }

    /**
     * Search for an album by name on Last.fm.
     * @param {Object} params
     * @param {string} params.album - The album name.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=30] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/album.search}
     */
    async search(params) {
        return this.#client.request('album.search', params);
    }
}

class Artist {
    #client;

    /**
     * Represents the Artist API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Tag an artist with one or more user supplied tags.
     * @param {Object} params 
     * @param {string} params.artist - The artist name.
     * @param {string[]} params.tags - An array of user supplied tags to apply to this artist. Accepts a maximum of 10 tags.
     * @param {string} sk 
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.addTags}
     */
    async addTags(params, sk) {
        return this.#client.requestSigned('artist.addtags', params, sk, 'POST');
    }

    /**
     * Use the last.fm corrections data to check whether the supplied artist has a correction to a canonical artist.
     * @param {Object} params 
     * @param {string} params.artist - The artist name to correct.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getCorrection}
     */
    async getCorrection(params) {
        return this.#client.request('artist.getcorrection', params);
    }

    /**
     * Get the metadata for an artist. Includes biography, truncated at 300 characters.
     * @param {Object} params
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {string} [params.lang] - The language to return the biography in, expressed as an ISO 639 alpha-2 code.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @param {string} [params.username] - The username for the context of the request. If supplied, the user's playcount for this artist is included in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getInfo}
     */
    async getInfo(params) {
        return this.#client.request('artist.getinfo', params);
    }

    /**
     * Get all the artists similar to this artist.
     * @param {Object} params 
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {number} [params.limit] - Limit the number of similar artists returned.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getSimilar}
     */
    async getSimilar(params) {
        return this.#client.request('artist.getsimilar', params);
    }

    /**
     * Get the tags applied by an individual user to an artist on Last.fm. 
     * If accessed as an authenticated service /and/ you don't supply a user parameter then this service will return tags for the authenticated user. 
     * To retrieve the list of top tags applied to an artist by all users use artist.getTopTags.
     * @param {Object} params
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {string} [params.user] - If called in non-authenticated mode you must specify the user to look up.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getTags}
     */
    async getTags(params) {
        return this.#client.request('artist.gettags', params);
    }

    /**
     * Get the top albums for an artist on Last.fm, ordered by popularity.
     * @param {Object} params 
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @param {number} [params.page] - The page number to fetch.
     * @param {number} [params.limit] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getTopAlbums}
     */
    async getTopAlbums(params) {
        return this.#client.request('artist.gettopalbums', params);
    }

    /**
     * Get the top tags for an artist on Last.fm, ordered by popularity.
     * @param {Object} params 
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('artist.gettoptags', params);
    }

    /**
     * Get the top tracks by an artist on Last.fm, ordered by popularity
     * @param {Object} params 
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the artist.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * @param {number} [params.page] - The page number to fetch.
     * @param {number} [params.limit] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.getTopTracks}
     */
    async getTopTracks(params) {
        return this.#client.request('artist.gettoptracks', params);
    }

    /**
     * Remove a user's tag from an artist.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.tag - A single user tag to remove from this artist.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/artist.removeTag}
     */
    async removeTag(params, sk) {
        return this.#client.requestSigned('artist.removetag', params, sk, 'POST');
    }

    /**
     * Search for an artist by name. Returns artist matches sorted by relevance.
     * @param {Object} params 
     * @param {string} params.artist - The artist name.
     * @param {number} [params.page] - The page number to fetch.
     * @param {number} [params.limit] - The number of results to fetch per page.
     * @returns 
     * @see {@link https://www.last.fm/api/show/artist.search}
     */
    async search(params) {
        return this.#client.request('artist.search', params);
    }
}

class Auth {
    #client;
    #token;

    /**
     * Represents the Auth API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * This is a helper function to generate the OAuth URL for the user to authorize the application.
     * @param {string} [token] - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user).
     * @returns {Promise<string>}
     * @see {@link https://www.last.fm/api/authentication}
     */
    async getAuthUrl(token = null) {
        if (token == null) {
            token = await this.getToken();
        }
        this.#token = token;

        return `http://www.last.fm/api/auth/?api_key=${this.#client.apiKey}&token=${token}`;
    }

    /**
     * Fetch a session key for a user. The third step in the authentication process. See the {@link https://www.last.fm/api/authentication|authentication how-to} for more information.
     * @param {string} [token] - A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user)
     * @returns {Promise<Object>}
     */
    async getSession(token = null) {
        if (token == null) {
            token = this.#token;
        }

        let data = await this.#client.requestSigned('auth.getSession', { token }, null);
        // Tokens should be invalid after use, but we'll clear it just in case
        this.#token = null;

        return data.session;
    }

    /**
     * Fetch an unathorized request token for an API account. This is step 2 of the authentication process for desktop applications. Web applications do not need to use this service.
     * @returns {Promise<string>}
     */
    async getToken() {
        let data = await this.#client.request('auth.getToken', {});
        return data.token;
    }
}

class Chart {
    #client;

    /**
     * Represents the Chart API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Get the top artists chart.
     * @param {Object} params
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/chart.getTopArtists}
     */
    async getTopArtists(params) {
        return this.#client.request('chart.gettopartists', params);
    }

    /**
     * Get the top tags chart.
     * @param {Object} params
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/chart.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('chart.gettoptags', params);
    }

    /**
     * Get the top tracks chart.
     * @param {Object} params
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/chart.getTopTracks}
     */
    async getTopTracks(params) {
        return this.#client.request('chart.gettoptracks', params);
    }
}

class Geo {
    #client;

    /**
     * Represents the Geo API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Get the top artists for a specific country.
     * @param {Object} params
     * @param {string} params.country - A country name, as defined by the ISO 3166-1 country names standard.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/geo.getTopArtists}
     */
    async getTopArtists(params) {
        return this.#client.request('geo.gettopartists', params);
    }

    /**
     * Get the top tracks for a specific country.
     * @param {Object} params
     * @param {string} params.country - A country name, as defined by the ISO 3166-1 country names standard.
     * @param {string} [params.location] - A metro name, to fetch the charts for (must be within the country specified). 
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/geo.getTopTracks}
     */
    async getTopTracks(params) {
        return this.#client.request('geo.gettoptracks', params);
    }
}

class Library {
    #client;

    /**
     * Represents the Library API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Get the top artists in the user's library.
     * @param {Object} params
     * @param {string} params.user - The LastFM username.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/library.getArtists}
     */
    async getArtists(params) {
        return this.#client.request('library.getartists', params);
    }
}

class Tag {
    #client;

    /**
     * Represents the Tag API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Get the metadata for a tag.
     * @param {Object} params
     * @param {string} params.lang - The language to return the wiki in, expressed as an ISO 639 alpha-2 code.
     * @param {string} params.tag - The tag name.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getInfo}
     */
    async getInfo(params) {
        return this.#client.request('tag.getinfo', params);
    }

    /**
     * Search for tags similar to this one. Returns tags ranked by similarity, based on listening data.
     * @param {Object} params
     * @param {string} params.tag - The tag name.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getSimilar}
     */
    async getSimilar(params) {
        return this.#client.request('tag.getsimilar', params);
    }

    /**
     * Get the top albums tagged by this tag, ordered by tag count.
     * @param {Object} params
     * @param {string} params.tag - The tag name.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getTopAlbums}
     */
    async getTopAlbums(params) {
        return this.#client.request('tag.gettopalbums', params);
    }

    /**
     * Get the top artists tagged by this tag, ordered by tag count.
     * @param {Object} params
     * @param {string} params.tag - The tag name.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getTopArtists}
     */
    async getTopArtists(params) {
        return this.#client.request('tag.gettopartists', params);
    }

    /**
     * Fetches the top global tags on Last.fm, sorted by popularity (number of times used).
     * @param {Object} params
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('tag.gettoptags', params);
    }

    /**
     * Get the top tracks tagged by this tag, ordered by tag count.
     * @param {Object} params
     * @param {string} params.tag - The tag name.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getTopTracks}
     */
    async getTopTracks(params) {
        return this.#client.request('tag.gettoptracks', params);
    }

    /**
     * Get a list of available charts for this tag, expressed as date ranges which can be sent to the chart services.
     * @param {Object} params
     * @param {string} params.tag - The tag name.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/tag.getWeeklyChartList}
     */
    async getWeeklyChartList(params) {
        return this.#client.request('tag.getweeklychartlist', params);
    }
}

class Track {
    #client;

    /**
     * Represents the Track API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Tag a track (website says album?) using a list of user supplied tags.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.track - The track name.
     * @param {string[]} params.tags - An array of user supplied tags to apply to this track. Accepts a maximum of 10 tags.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.addTags}
     */
    async addTags(params, sk) {
        return this.#client.requestSigned('track.addtags', params, sk, 'POST');
    }

    /**
     * Use the last.fm corrections data to check whether the supplied track has a correction to a canonical track
     * @param {Object} params
     * @param {string} params.artist - The artist name to correct.
     * @param {string} params.track - The track name to correct.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.getCorrection}
     */
    async getCorrection(params) {
        return this.#client.request('track.getcorrection', params);
    }

    /**
     * Get the metadata for a track on Last.fm using the artist/track name or a musicbrainz id.
     * @param {Object} params
     * @param {string} [params.track] - **Required (unless mbid)** The track name.
     * @param {string} [params.artist] - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {string} [params.username] - The LastFM username.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.getInfo}
     */
    async getInfo(params) {
        return this.#client.request('track.getinfo', params);
    }

    /**
     * Get the similar tracks for this track on Last.fm, based on listening data.
     * @param {Object} params
     * @param {string} params.track - **Required (unless mbid)** The track name.
     * @param {string} params.artist - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
     * @param {number} [params.limit] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.getSimilar}
     */
    async getSimilar(params) {
        return this.#client.request('track.getsimilar', params);
    }

    /**
     * Get the tags applied by an individual user to a track on Last.fm. To retrieve the list of top tags applied to a track by all users use track.getTopTags.
     * @param {Object} params
     * @param {string} params.track - **Required (unless mbid)** The track name.
     * @param {string} params.artist - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
     * @param {string} [params.user] - If called in non-authenticated mode you must specify the user to look up.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.getTags}
     */
    async getTags(params) {
        return this.#client.request('track.gettags', params);
    }

    /**
     * Get the top tags for this track on Last.fm, ordered by tag count. Supply either track & artist name or mbid.
     * @param {Object} params
     * @param {string} params.track - **Required (unless mbid)** The track name.
     * @param {string} params.artist - **Required (unless mbid)** The artist name.
     * @param {string} [params.mbid] - The musicbrainz id for the track.
     * @param {0|1} [params.autocorrect=1] - Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('track.gettoptags', params);
    }

    /**
     * Love a track for a user profile.
     * @param {Object} params
     * @param {string} params.artist - A track name (utf8 encoded).
     * @param {string} params.track -  An artist name (utf8 encoded).
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.love}
     */
    async love(params, sk) {
        return this.#client.requestSigned('track.love', params, sk, 'POST');
    }

    /**
     * Remove a user's tag from a track.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.track - The track name.
     * @param {string} params.tag - A single user tag to remove from this track.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.removeTag}
     */
    async removeTag(params, sk) {
        return this.#client.requestSigned('track.removetag', params, sk, 'POST');
    }

    /**
     * Used to add a track-play to a user's profile. 
     * Scrobble a track, or a batch of tracks. 
     * Tracks are passed to the service using array notation for each of the below params, up to a maximum of 50 scrobbles per batch [0<=i<=49]. 
     * If you are only sending a single scrobble the array notation may be ommited. 
     * Note: Extra care should be taken while calculating the signature when using array notation as the parameter names MUST be sorted according to the ASCII table (i.e., artist[10] comes before artist[1]). 
     * It is important to not use the corrections returned by the now playing service as input for the scrobble request, unless they have been explicitly approved by the user. 
     * Parameter names are case sensitive.
     * @param {Object} params
     * @param {Object[]} params.tracks - An array of tracks to scrobble.
     * @param {string} params.tracks[].artist - The artist name.
     * @param {string} params.tracks[].track - The track name.
     * @param {string} params.tracks[].timestamp - The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
     * @param {string} [params.tracks[].album] - The album name.
     * @param {string} [params.tracks[].context] - Sub-client version (not public, only enabled for certain API keys).
     * @param {string} [params.tracks[].streamId] - The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio.
     * @param {0|1} [params.tracks[].chosenByUser] - Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified.
     * @param {number} [params.tracks[].trackNumber] - The track number of the track on the album.
     * @param {string} [params.tracks[].mbid] - The MusicBrainz Track ID.
     * @param {string} [params.tracks[].albumArtist] - The album artist - if this differs from the track artist.
     * @param {number} [params.tracks[].duration] - The length of the track in seconds.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.scrobble}
     */
    async scrobble(params, sk) {
        return this.#client.requestSigned('track.scrobble', params, sk, 'POST');
    }

    /**
     * Search for a track by track name. Returns track matches sorted by relevance.
     * @param {Object} params
     * @param {string} params.track - The track name.
     * @param {string} [params.artist] - Narrow your search by specifying an artist.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.search}
     */
    async search(params) {
        return this.#client.request('track.search', params);
    }

    /**
     * UnLove a track for a user profile.
     * @param {Object} params
     * @param {string} params.track - A track name (utf8 encoded).
     * @param {string} params.artist - An artist name (utf8 encoded).
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.unlove}
     */
    async unlove(params, sk) {
        this.#client.requestSigned('track.unlove', params, sk, 'POST');
    }

    /**
     * Update the now playing status for a track.
     * @param {Object} params
     * @param {string} params.artist - The artist name.
     * @param {string} params.track - The track name.
     * @param {string} [params.album] - The album name.
     * @param {number} [params.trackNumber] - The track number of the track on the album.
     * @param {string} [params.context] - Sub-client version (not public, only enabled for certain API keys).
     * @param {string} [params.mbid] - The MusicBrainz ID of the track.
     * @param {number} [params.duration] - The length of the track in seconds.
     * @param {string} [params.albumArtist] - The album artist - if this differs from the track artist.
     * @param {string} sk - A session key generated by authenticating a user via the authentication protocol.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/track.updateNowPlaying}
     */
    async updateNowPlaying(params, sk) {
        return this.#client.requestSigned('track.updatenowplaying', params, sk, 'POST');
    }
}

class User {
    #client;

    /**
     * Represents the User API for LastFM.
     * @param {LastFM} client - The LastFM client.
     * @constructor
     */
    constructor(client) {
        this.#client = client;
    }

    /**
     * Get a list of the user's friends on Last.fm.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the friends of.
     * @param {boolean} [params.recenttracks] - Whether or not to include information about friends' recent listening in the response.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getFriends}
     */
    async getFriends(params) {
        this.#client.request('user.getfriends', params);
    }

    /**
     * Get information about a user profile.
     * @param {Object} params
     * @param {string} params.user - The user to fetch info for. Defaults to the authenticated user.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getInfo}
     */
    async getInfo(params) {
        return this.#client.request('user.getinfo', params);
    }

    /**
     * Get the last tracks loved by a user.
     * @param {Object} params
     * @param {string} params.user - The user name to fetch the loved tracks for.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getLovedTracks}
     */
    async getLovedTracks(params) {
        return this.#client.request('user.getlovedtracks', params);
    }

    /**
     * Get the user's personal tags.
     * @param {Object} params
     * @param {string} params.user - The user who performed the taggings.
     * @param {string} params.tag - The tag you're interested in.
     * @param {'artist'|'album'|'track'} params.taggingtype - The type of items which have been tagged.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getPersonalTags}
     */
    async getPersonalTags(params) {
        return this.#client.request('user.getpersonaltags', params);
    }

    /**
     * Get a list of the recent tracks listened to by this user. 
     * Also includes the currently playing track with the nowplaying="true" attribute if the user is currently listening.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the recent tracks of.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @param {0|1} [params.extended=1] - Includes extended data in each artist, and whether or not the user has loved each track.
     * @param {number} [params.from] - Beginning timestamp of a range - only display scrobbles after this time, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
     * @param {number} [params.to] - End timestamp of a range - only display scrobbles before this time, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getRecentTracks}
     */
    async getRecentTracks(params) {
        return this.#client.request('user.getrecenttracks', params);
    }

    /**
     * Get the top albums listened to by a user. You can stipulate a time period. Sends the overall chart by default.
     * @param {Object} params
     * @param {string} params.user - The user name to fetch top albums for.
     * @param {'overall'|'7day'|'1month'|'3month'|'6month'|'12month'} [params.period] - The time period over which to retrieve top albums for.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getTopAlbums}
     */
    async getTopAlbums(params) {
        return this.#client.request('user.gettopalbums', params);
    }

    /**
     * Get the top artists listened to by a user. You can stipulate a time period. Sends the overall chart by default.
     * @param {Object} params
     * @param {string} params.user - The user name to fetch top albums for.
     * @param {'overall'|'7day'|'1month'|'3month'|'6month'|'12month'} [params.period] - The time period over which to retrieve top albums for.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getTopArtists}
     */
    async getTopArtists(params) {
        return this.#client.request('user.gettopartists', params);
    }

    /**
     * Get the top tags used by this user.
     * @param {Object} params
     * @param {string} params.user - The user name.
     * @param {number} [params.limit] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getTopTags}
     */
    async getTopTags(params) {
        return this.#client.request('user.gettoptags', params);
    }

    /**
     * Get the top tracks listened to by a user. You can stipulate a time period. Sends the overall chart by default.
     * @param {Object} params
     * @param {string} params.user - The user name to fetch top albums for.
     * @param {'overall'|'7day'|'1month'|'3month'|'6month'|'12month'} [params.period] - The time period over which to retrieve top albums for.
     * @param {number} [params.page=1] - The page number to fetch.
     * @param {number} [params.limit=50] - The number of results to fetch per page.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getTopTracks}
     */
    async getTopTracks(params) {
        return this.#client.request('user.gettoptracks', params);
    }

    /**
     * Get an album chart for a user profile, for a given date range. If no date range is supplied, it will return the most recent album chart for this user.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the charts of.
     * @param {number} [params.from] - The date at which the chart should start from.
     * @param {number} [params.to] - The date at which the chart should end on.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getWeeklyAlbumChart}
     */
    async getWeeklyAlbumChart(params) {
        return this.#client.request('user.getweeklyalbumchart', params);
    }

    /**
     * Get a user's weekly artist chart on Last.fm.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the charts of.
     * @param {number} [params.from] - The date at which the chart should start from.
     * @param {number} [params.to] - The date at which the chart should end on.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getWeeklyArtistChart}
     */
    async getWeeklyArtistChart(params) {
        return this.#client.request('user.getweeklyartistchart', params);
    }

    /**
     * Get a user's weekly chart list on Last.fm.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the charts list for.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getWeeklyChartList}
     */
    async getWeeklyChartList(params) {
        return this.#client.request('user.getweeklychartlist', params);
    }

    /**
     * Get a track chart for a user profile, for a given date range. If no date range is supplied, it will return the most recent track chart for this user.
     * @param {Object} params
     * @param {string} params.user - The last.fm username to fetch the charts of.
     * @param {number} [params.from] - The date at which the chart should start from.
     * @param {number} [params.to] - The date at which the chart should end on.
     * @returns {Promise<Object>}
     * @see {@link https://www.last.fm/api/show/user.getWeeklyTracksChart}
     */
    async getWeeklyTracksChart(params) {
        return this.#client.request('user.getweeklytrackschart', params);
    }
}